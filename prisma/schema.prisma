// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user") // "user", "admin"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  posts     Post[]
  quotes    Quote[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    User     @relation(fields: [authorId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  code        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products    Product[]
}

model PrintingTechnique {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products    Product[]
}

model Product {
  id                  String   @id @default(cuid())
  name                String
  description         String?
  code                String   @unique
  price               Float?
  image               String?
  images              String?  // JSON array of image URLs
  featured            Boolean  @default(false)
  minQuantity         Int?
  maxQuantity         Int?
  materials           String?  // JSON array of materials
  colors              String?  // JSON array of available colors
  sizes               String?  // JSON array of available sizes
  customizationInfo   String?
  categoryId          String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  category            Category            @relation(fields: [categoryId], references: [id])
  printingTechniques  PrintingTechnique[]
  quoteItems          QuoteItem[]
}

model Quote {
  id          String   @id @default(cuid())
  clientName  String
  clientEmail String
  clientPhone String?
  company     String?
  status      String   @default("pending") // "pending", "reviewed", "responded"
  totalAmount Float?
  notes       String?
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User?      @relation(fields: [userId], references: [id])
  items       QuoteItem[]
}

model QuoteItem {
  id          String @id @default(cuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  notes       String?
  quoteId     String
  productId   String
  createdAt   DateTime @default(now())
  
  quote       Quote   @relation(fields: [quoteId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
}